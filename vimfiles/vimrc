" I'm testing out, calm down ok?
if !has('vim9script') ||  v:version < 900
    " Needs Vim version 9.0 and above
    finish
endif

vim9script noclear

syntax enable
filetype plugin on

g:mapleader = ' '

# Sets {{{
set ruler
set nocompatible
set colorcolumn=80
set ttyfast
set ttyscroll=3
set lazyredraw
set hidden
set nowrap
set autoread
#set nosmartindent                       # TODO: remove this line if things go wrong
set tabstop=2                            # a tab is two spaces
set expandtab                            #
set backspace=indent,eol,start           # allow backspacing over everything in insert mode
set autoindent                           # always set autoindenting on
set number                               # always show line numbers
set shiftwidth=2                         # number of spaces to use for autoindenting
set shiftround                           # use multiple of shiftwidth when indenting with '<' and '>'
set showmatch                            # set show matching parenthesis
set ignorecase                           # ignore case when searching
set smartcase                            # ignore case if search pattern is all lowercase, case-sensitive otherwise
set smarttab                             # insert tabs on the start of a line according to shiftwidth, not tabstop
set hlsearch                             # highlight search terms
set incsearch                            # show search matches as you type
set history=1000                         # remember more commands and search history
set undolevels=1000                      # use many muchos levels of undo
set title                                # change the terminal's title
set novisualbell                         # don't flash
set noerrorbells                         # don't beep
set nobackup
set noswapfile
set viminfo='1000,f1,<500,:100,/100,h
set shortmess=aoOtqsIl # no annoying start screen
set linebreak
set nolist  # list disables linebreak
set textwidth=80
set wrapmargin=0
set cryptmethod=blowfish2
set termguicolors

if &ft != "vim"
  set foldlevelstart=99
endif
# }}}

# Settings {{{
# Fuzzy Finder
set wildoptions=fuzzy,pum,tagfile
set wildmenu
set noswapfile
set nobackup
set history=500
set hidden
if exists("&undofile")
  set undofile
  set undodir=/etc/vimundo
endif
set ignorecase smartcase
set showcmd ruler laststatus=0
set splitright splitbelow
# set listchars=trail:.,tab:>-,extends:>,precedes:<,nbsp:Â¬
# set list

set autoindent
set expandtab

# Typing behavior
set backspace=indent,eol,start
set showmatch
set wildmode=full
set wildmenu
set complete-=i
set completeopt=menuone,menu,preview,popup,noinsert
set shortmess+=c   # Shut off completion messages
set belloff+=ctrlg # Add only if Vim beeps during completion
# }}}

# Mappings {{{
nmap Y y$

vnoremap < <gv
vnoremap > >gv

nnoremap <leader>y "+y
nnoremap <leader>Y "+y$
vnoremap <leader>y "+y

def! g:TogglePaste(): void
  set paste!

  if &paste
    echo "Paste Mode (ON)"
  else
    echo "Paste Mode (OFF)"
  endif
enddef

nmap <leader>p :call g:TogglePaste()<cr>
# }}}

# Plugin Manager
const plug_file_location = '~/.vim/autoload/plug.vim'

if empty(glob(plug_file_location))
  silent execute printf('!curl -fLo %s --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim', plug_file_location)
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.local/share/vim_plugins')
# {{{File tree
Plug 'preservim/nerdtree'
var NERDTreeIgnore = ['\.idr\~$', '\.ibc$', '\.min.js$', '\.agdai', '\.pyc$', '\.hi$', '\.o$', '\.js_o$', '\.js_hi$', '\.dyn_o$', '\.dyn_hi$', '\.jsexe', '.*dist\/.*', '.*bin\/.*']
var NERDTreeChDirMode = 2
var NERDTreeWinSize = 24
var NERDTreeShowHidden = 1

nmap <leader>n :NERDTree<CR>
nmap <leader>f :NERDTreeFind<CR>
# }}}
# {{{Syntax highlight
Plug 'elixir-editors/vim-elixir'
Plug 'prisma/vim-prisma'
Plug 'ocaml/vim-ocaml'

au BufRead,BufNewFile *.ex,*.exs set filetype=elixir
au BufRead,BufNewFile *.eex,*.heex,*.leex,*.sface,*.lexs set filetype=eelixir
au BufRead,BufNewFile mix.lock set filetype=elixir
# }}}
# {{{ Misc
Plug 'cherryramatisdev/yafold.vim'
Plug 'mg979/vim-visual-multi', {'branch': 'master'}
# Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'tomtom/tcomment_vim'
Plug 'bogado/file-line'
Plug 'pbrisbin/vim-mkdir'
Plug 'andlrc/CTRLGGitBlame.vim'
Plug 'tpope/vim-dadbod'
Plug 'kristijanhusak/vim-dadbod-ui'
Plug 'mattn/emmet-vim'
g:user_emmet_install_global = 0
autocmd FileType html,typescript,typescriptreact,javascriptreact,css,heex EmmetInstall | imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")
Plug 'mrdotb/vim-tailwindcss'
autocmd FIleType html,typescript,typescriptreact,javascriptreact,heex setlocal completefunc=tailwind#complete

# }}}
# {{{LSP
Plug 'yegappan/lsp'
var lspOpts = {
  aleSupport: false,
  autoComplete: true,
  autoHighlight: false,
  autoHighlightDiags: true,
  autoPopulateDiags: false,
  completionMatcher: 'case',
  completionMatcherValue: 1,
  diagSignErrorText: 'E>',
  diagSignHintText: 'H>',
  diagSignInfoText: 'I>',
  diagSignWarningText: 'W>',
  echoSignature: false,
  hideDisabledCodeActions: false,
  highlightDiagInline: true,
  hoverInPreview: false,
  ignoreMissingServer: false,
  keepFocusInDiags: true,
  keepFocusInReferences: true,
  completionTextEdit: true,
  diagVirtualTextAlign: 'above',
  diagVirtualTextWrap: 'default',
  noNewlineInCompletion: false,
  omniComplete: true,
  outlineOnRight: false,
  outlineWinSize: 20,
  semanticHighlight: true,
  showDiagInBalloon: true,
  showDiagInPopup: true,
  showDiagOnStatusLine: false,
  showDiagWithSign: true,
  showDiagWithVirtualText: false,
  showInlayHints: false,
  showSignature: true,
  snippetSupport: true,
  ultisnipsSupport: false,
  useBufferCompletion: true,
  usePopupInCodeAction: true,
  useQuickfixForLocations: true,
  vsnipSupport: false,
  bufferCompletionTimeout: 100,
  customCompletionKinds: false,
  completionKinds: {},
  filterCompletionDuplicates: false,
}
autocmd User LspSetup call LspOptionsSet(lspOpts)

var lspServers: list<dict<any>> = [
  # npm i -g typescript typescript-language-server
  {
    name: 'typescript-language-server',
    filetype: ['typescript', 'typescriptreact', 'javascript', 'javascriptreact'],
    path: 'typescript-language-server',
    args: ['--stdio']
  },
  # npm install -g @tailwindcss/language-server
  {
    name: 'tailwindcss-language-server',
    filetype: ['typescript', 'typescriptreact', 'javascript', 'javascriptreact'],
    path: 'tailwindcss-language-server',
    args: ['--stdio']
  },
  {
    name: 'rustlang',
    filetype: ['rust'],
    path: 'rust-analyzer',
    args: [],
    syncInit: v:true
  },
]

def LspSetup()
  setlocal tagfunc=lsp#lsp#TagFunc
  nmap <buffer> gR <cmd>LspShowReferences<cr>
  nmap <buffer> gI <cmd>LspGotoImpl<cr>
  nmap <buffer> <leader>rn <cmd>LspRename<cr>
  nmap <buffer> ]d <cmd>LspDiag next<cr>
  nmap <buffer> [d <cmd>LspDiag prev<cr>
  nmap <buffer> <leader>e <cmd>LspDiag show<cr>
  nmap <buffer> K <cmd>LspHover<cr>
  nmap <buffer> ga <cmd>LspCodeAction<cr>
  xmap <buffer> ga <cmd>LspCodeAction<cr>
enddef

autocmd User LspSetup call LspAddServer(lspServers)

for language in lspServers
  var filetypes = language.filetype->join(',')
  execute printf('au FileType %s call LspSetup()', filetypes)
  execute printf('au BufWritePost %s LspFormat', filetypes)
endfor
# }}}
# {{{ colors
Plug 'lifepillar/vim-solarized8'
Plug 'cherryramatisdev/theme-sync.vim'
g:theme_sync_light_colorscheme = 'solarized8_flat'
g:theme_sync_dark_colorscheme = 'solarized8_flat'
# }}}
# {{{ tpope
# Substitute this with a simple function, i just use the GB anyway
Plug 'tpope/vim-fugitive' | Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-dispatch'
# }}}
# {{{Andrew Radev
Plug 'AndrewRadev/deleft.vim'
Plug 'AndrewRadev/sideways.vim'
nnoremap gh :SidewaysLeft<cr>
nnoremap gl :SidewaysRight<cr>
omap aa <Plug>SidewaysArgumentTextobjA
xmap aa <Plug>SidewaysArgumentTextobjA
omap ia <Plug>SidewaysArgumentTextobjI
xmap ia <Plug>SidewaysArgumentTextobjI
Plug 'AndrewRadev/splitjoin.vim'
g:splitjoin_split_mapping = ''
g:splitjoin_join_mapping = ''
nmap <Leader>j :SplitjoinSplit<cr>
nmap <Leader>k :SplitjoinJoin<cr>
# }}}
call plug#end()

# {{{ Writing / Markdown stuff
g:markdown_fenced_languages = ['ocaml', 'ruby', 'typescript', 'rust', 'bash=sh']
#}}}

# {{{ Gui settings
if has('gui_running')
  set guifont=ComicShannsMono\ Nerd\ Font:h17
  set guicursor=a:ver100     # Set cursor to block shape
  set visualbell             # Use visual bell instead of audible
  set noerrorbells           # Disable error bells
  set guioptions-=l           # Disable left scrollbar
  set guioptions-=L           # Disable right scrollbar
  set guioptions-=T           # Disable toolbar
  set guioptions-=m           # Disable menu
endif
# }}}

# Colorscheme changes {{{
au VimEnter * hi Search ctermbg=NONE ctermbg=NONE cterm=underline ctermfg=red
# }}}

# Format on save {{{
def! g:Format(type: string): void
  if type == 'eslint' && systemlist("grep -q 'eslint' package.json")->len() > 0
    execute('Dispatch! yarn eslint --fix %')
  endif
enddef

au BufWritePre typescript,typescriptreact,javascript,javascriptreact call g:Format('eslint')
# }}}

# vim: fdm=marker foldenable sw=2 ts=2 sts=2
